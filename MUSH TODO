MUSH TODO
---------

OPTIMIZATIONS
- crawling cubes (start at a cell that's on the surface then only explore neighbor cells that are also on the surface)
- collapse linked list (of metaballs) into an array of values, then do for loops instead of while loops (consider using pointer arithmetic instead of indexing), one loop for each step (difference, squared length, inversion) to see if it auto-vectorizes or as a step towards manual vectorization
- look into using glcvtexturecache or mapbuffer instead of gltexsubimage2d

CLEAN
- split up meshMetaballs
- move meshMetaballs etc into a module
- put on github

FIX
- clarify the shader to make it obvious that it's a directional light, not a positional one
- visual fuckery introduced when switched to squared length

LOOKS
- add specular highlights
- turn on (animated) vertex offset again to se what it looks like with backfaces rendered & lit

PLAY
- a value field that starts with all 1s (a cube) and then you can add/subtract from the volume by touching and value is added/subtracted from the cells around the one your touch hit
  * can figure out what cell was touched by having a render buffer whose pixels store the xyz of the cell that generated that face
- draw lines in space and have them generate surfaces as well as points
- create "negative" metaballs, which subtract force in the same way that normal ones contribute force
